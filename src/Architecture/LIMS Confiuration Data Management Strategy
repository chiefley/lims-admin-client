# LIMS Data Management Strategy

## Overview

This document outlines the data management strategy for the LIMS Admin Client, focusing on how data is fetched, edited, and saved between the client and server. The approach is designed for configuration data that consists of complex object graphs with parent-child relationships.

## Core Principles

1. **Aggregate Root Pattern**: Each major entity type has an aggregate root that encapsulates the behavior for fetching, validating, and upserting data.
2. **Complete Object Graphs**: We work with entire object graphs rather than individual entities to maintain data consistency.
3. **Active/Inactive Instead of Deletion**: Records are never physically deleted, only marked as inactive when they should no longer be used. However, if records have no Active flag, then they are deleteable. They will be exceptions to this rule.
4. **Client-Side Temporary IDs**: New records created on the client use negative IDs until saved to the server.
5. **Laboratory Context Security**: All configuration data is isolated by laboratory through the LabId field.

## Data Flow

### Fetching Data

1. The client makes a GET request to the appropriate endpoint.
2. The server-side controller calls the service method.
3. The service calls a static method on the aggregate root response class to fetch and project the data:
   ```csharp
   var response = await InstrumentTypeRs.FetchInstrumentTypes(query);
   ```
4. This method handles the mapping from domain models to response objects, including all child collections.
5. The complete object graph is returned to the client.

### Editing Data

1. The client displays the data to the user who makes modifications.
2. New records are assigned temporary negative IDs on the client.
3. Modifications are tracked in the client state.
4. When the user saves, the entire object graph (with all modifications) is sent back to the server.

### Saving Data

1. The client sends a PUT/POST request with the entire modified object graph.
2. The server-side controller calls the service method.
3. The service loads the current model objects from the database.
4. The service calls a static validation method on the aggregate root response:
   ```csharp
   var validationResult = InstrumentTypeRs.Validate(submittedResponse, labId);
   if (!validationResult.IsValid) return ValidationError(validationResult);
   ```
5. The service then calls a static upsert method that handles mapping changes from the response to the model:
   ```csharp
   InstrumentTypeRs.UpsertFromResponse(submittedResponse, existingModels, context);
   ```
6. This method cascades through the object graph, handling each level:
   ```csharp
   // Example pattern for the cascading approach
   await InstrumentRs.UpsertFromResponses(
       response.InstrumentRss,
       instrumentType.Instruments.ToList(),
       instrumentType,
       context);
   ```
7. Entity Framework tracks all changes across the object graph.
8. Finally, the service calls `context.SaveChanges()` to persist all changes in a single transaction.

## Enum Data Flow

- Response objects will be sending Enums as their string values.
- The UI will usually bind them to Dropdown controls whose choices come from the Selectors.
- In the Upsert code on the server end they should be converted back by Enum.Parse<T>(response.property!).
- Some of the earlier response signatures are sending the integer value instead of the string value. These will be updated soon.

## Handling Record States

### New Records

- Identified by negative IDs on the client side
- Converted to proper domain models with appropriate default values
- Added to the appropriate DbSet **and** to the parent's collection
- Example:
  ```csharp
  // New instrument
  instrument = new Instrument();
  instrumentType.Instruments.Add(instrument);
  context.Instruments.Add(instrument);
  ```

### Updated Records

- Identified by matching positive IDs
- Properties are updated from the response values
- Child collections are processed recursively
- Example:

  ```csharp
  instrument = existingInstruments.SingleOrDefault(i => i.Id == response.InstrumentId)
      ?? throw new InvalidOperationException($"Unknown Instrument with Id: {response.InstrumentId}");

  instrument.Name = response.Name;
  instrument.Active = response.Active;
  ```

### Active/Inactive Management

- Most records are never physically deleted. They will be identified by the presence of an Active flag in their signature. However, if there is no Active flag, the record is hard-deleteable.
- The `Active` property is treated like any other property, allowing the client to set it as needed
- The client is responsible for setting `Active = false` when a record should be "soft deleted"
- Client implementations should filter records based on the Active flag by default
- A "Show Inactive" toggle in the UI allows users to see inactive records when needed
- Example:
  ```csharp
  // Client-side filter
  const filteredRecords = showInactive
    ? records
    : records.filter(record => record.active !== false);
  ```

## Laboratory Context Security

- The LIMS system supports multiple laboratories
- All configuration data is scoped to a specific laboratory through the `LabId` property
- API endpoints include lab context in the URL or as a parameter
- Response objects include the `LabId` property when they represent laboratory-specific data
- Validation ensures that submitted data has the correct laboratory context:
  ```csharp
  RuleFor(x => x.LabId)
      .Equal(labId).WithMessage($"Lab ID must equal {labId}");
  ```
- This prevents cross-laboratory data manipulation and ensures proper data isolation

## State Context Security.

- The various laboratories supported by the LIMS are located in various states in the USA.
- The states have state-wide regulations that are modeled in many of the LIMS tables.
- The State context is as important as the Lab context.
- A given user of this application will be acting within the context of a particular Lab in a particular State.
- When we add user authentication, the Lab and State context will be available from the API. In the meantime, assume a LabId of 1001 and a State Id of 2.

## Benefits

1. **Data Consistency**: Working with complete object graphs ensures referential integrity.
2. **Simplified API Surface**: Fewer endpoints are needed (typically one GET and one PUT per major entity type).
3. **Atomic Updates**: All changes are saved in a single transaction.
4. **Maintainable Code Structure**: Each response type knows how to update its corresponding model.
5. **Auditability**: No data is ever physically deleted, providing a complete history.
6. **Referential Integrity**: Inactive records can still be referenced by other entities.
7. **Security Isolation**: Clear boundaries between laboratories are maintained.

## Implementation Guidelines

1. Response classes should closely mirror domain models but with appropriate data transfer optimizations.
2. Use static methods on response classes to encapsulate fetch, validate, and upsert logic.
3. Make validation rules consistent between client and server.
4. Each collection in the object graph should have its own upsert method to promote maintainability.
5. Keep response classes simple and focused on data transfer, not business logic.
6. Use proper error handling and transaction management for robust operations.
7. Pass parent objects to child upsert methods to maintain proper object graph relationships.
8. Treat the Active flag just like any other property, with no special handling on the server.
9. Always validate the laboratory context for security.

## Example Implementation

### Response Class with Static Methods

```csharp
public class InstrumentTypeRs
{
    // Properties
    public int InstrumentTypeId { get; set; }
    public string Name { get; set; }
    public bool Active { get; set; } = true;
    public int LabId { get; set; }
    public List<InstrumentRs> InstrumentRss { get; set; } = new();

    // Fetch method
    public static async Task<List<InstrumentTypeRs>> FetchInstrumentTypes(IQueryable<InstrumentType> query)
    {
        return await query.Select(it => new InstrumentTypeRs
        {
            InstrumentTypeId = it.Id,
            Name = it.Name,
            Active = it.Active,
            LabId = it.LabId,
            InstrumentRss = it.Instruments.Select(i => new InstrumentRs
            {
                // Map instrument properties
            }).ToList()
        }).ToListAsync();
    }

    // Validation method
    public static ValidationResult Validate(InstrumentTypeRs response, int labId)
    {
        var validator = new InstrumentTypeRsValidator(labId);
        var validationResult = validator.Validate(response);

        return new ValidationResult {
            IsValid = validationResult.IsValid,
            Errors = validationResult.Errors.Select(e => new ValidationError {
                PropertyName = e.PropertyName,
                ErrorMessage = e.ErrorMessage
            }).ToList()
        };
    }

    // Upsert method
    public static async Task<InstrumentType> UpsertFromResponse(
        InstrumentTypeRs response,
        List<InstrumentType> existingTypes,
        NCLimsContext context)
    {
        InstrumentType instrumentType;

        if (response.InstrumentTypeId <= 0)
        {
            // New instrument type
            instrumentType = new InstrumentType();
            context.InstrumentTypes.Add(instrumentType);
        }
        else
        {
            // Find existing instrument type
            instrumentType = existingTypes.SingleOrDefault(m => m.Id == response.InstrumentTypeId)
                ?? throw new KeyNotFoundException($"InstrumentType with ID {response.InstrumentTypeId} not found");
        }

        // Update properties
        instrumentType.Name = response.Name;
        instrumentType.Active = response.Active;
        instrumentType.LabId = response.LabId;

        // Process child collections - pass the parent object
        await InstrumentRs.UpsertFromResponses(
            response.InstrumentRss,
            instrumentType.Instruments.ToList(),
            instrumentType,
            context);

        return instrumentType;
    }
}
```

This strategy provides a clean, maintainable approach to handling complex data operations in the LIMS system, especially for configuration data that requires careful management of relationships and historical records.
